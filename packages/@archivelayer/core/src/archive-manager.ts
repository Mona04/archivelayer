import fs from 'fs'

import {
  getValue
} from '@archivelayer/utils'

import {ArchiveLayerConfigs, DocumentType} from './configs'

const basePath = './.archivelayer/';
class ArchiveManager
{
  mConfigs: ArchiveLayerConfigs;
  constructor()
  {
    this.mConfigs = {sourcePath:"", documentTypes:[]};
  
  }

  initialize(configs: ArchiveLayerConfigs)
  {
    this.mConfigs = configs;

    this.#checkBaseDirectory();    
    this.#checkPackageJson();

    // document type folder intialize
    for(var docTypeInput of this.mConfigs.documentTypes)
    {    
      const docType = getValue(docTypeInput);
      if(fs.existsSync(`${basePath}${docType.name}`) == false)
      {
        fs.mkdirSync(`${basePath}${docType.name}`);
      }
    }
 
  }

  updateFile(
    documentType : DocumentType,
    filePath: string, 
    metaData: {[key:string]:any}, 
    content: string)
  {
    this.#updateCache(documentType, filePath, metaData, content);
  }

  #checkBaseDirectory()
  {
    if(fs.existsSync(basePath) == false)
    {
      fs.mkdirSync(basePath);
    }
  }

  #checkPackageJson()
  {
    const packagejson = `{
  "name": "dot-archivelayer",
  "description": "This package is auto-generated by Archivelayer",
  "version": "0.0.0-V6D4HYCP",
  "exports": {
  "./generated": {
    "import": "./generated/index.mjs"
    }
  },
  "typesVersions": {
    "*": { "generated": ["./generated"] }
  }
}`

    if(fs.existsSync(`${basePath}package.json`) == false)
    {
      fs.writeFileSync(`${basePath}package.json`, packagejson);
    }
  }
  
  #updateCache(documentType : DocumentType, filePath: string, metaData: {[key:string]:any}, content: string)
  {
    const doc : any = {
      _id: filePath,
      _raw: {
        flattenPath: filePath,
        
      },
      body: {
        html: content,
      },
    };

    for(const fieldName in documentType.fields)
    {
      const field = documentType.fields[fieldName];
      const fieldData = metaData[fieldName]
      
      if(fieldData === undefined)
      {
        if(field?.required)
        {
          console.warn(`${fieldName} is not exist in ${filePath}`);
        }
      }
      else
      {
        doc[fieldName] = fieldData;
      }
    }

    fs.writeFile(`${basePath}${documentType.name}/${filePath}.json`, doc, ()=>{});
  }
}

export default ArchiveManager;